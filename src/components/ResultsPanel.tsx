import React from 'react';
import type { ResultData, TaxSettings, Message } from '../types';
import { formatCurrency } from '../utils';
import { calculateStateTax, getStandardDeduction, hasIncomeTax } from '../stateTaxData';
import { CloudDownloadIcon } from './Icons';

interface ResultsPanelProps {
  results: ResultData[] | null;
  mnSettings: TaxSettings;
  isLoading: boolean;
  message: Message;
}

const generatePDF = (results: ResultData[] | null, mnSettings: TaxSettings) => {
  if (!results || results.length === 0) return;

  // Aggregate per-state totals
  const stateTotals: Record<string, { total: number; days: number }> = {};
  let primaryState = '';
  
  results.forEach(({ result }) => {
    primaryState = result.primaryState;
    for (const state in result.allocations) {
      if (!stateTotals[state]) {
        stateTotals[state] = { total: 0, days: 0 };
      }
      stateTotals[state].total += result.allocations[state].total;
      stateTotals[state].days += result.allocations[state].days;
    }
  });
  
  const stateKeys = Object.keys(stateTotals)
    .filter(state => stateTotals[state].total > 0 || stateTotals[state].days > 0)
    .sort((a, b) => {
      const diff = stateTotals[b].total - stateTotals[a].total;
      if (diff !== 0) return diff;
      if (a === primaryState) return -1;
      if (b === primaryState) return 1;
      return a.localeCompare(b);
    });

  let primaryStateTax = null;
  if (stateTotals[primaryState] && hasIncomeTax(primaryState)) {
    const { tax } = calculateStateTax(
      stateTotals[primaryState].total, 
      primaryState, 
      mnSettings.deductionType,
      Number(mnSettings.itemizedDeduction || 0)
    );
    primaryStateTax = tax;
  }

  // Create printable content
  const printContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Tax Allocation Results - Split.Tax</title>
      <style>
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
          margin: 40px; 
          color: #374151;
          line-height: 1.6;
        }
        .header { 
          text-align: center; 
          margin-bottom: 40px; 
          border-bottom: 2px solid #e5e7eb; 
          padding-bottom: 20px;
        }
        .header h1 { 
          color: #111827; 
          margin: 0 0 10px 0; 
          font-size: 28px;
        }
        .header p { 
          color: #6b7280; 
          margin: 0;
          font-size: 14px;
        }
        .results { 
          margin: 30px 0; 
        }
        .state-card { 
          margin: 20px 0; 
          padding: 20px; 
          border: 1px solid #d1d5db; 
          border-radius: 8px;
          background: #f9fafb;
        }
        .state-card.primary { 
          background: #eff6ff; 
          border-color: #93c5fd;
        }
        .state-header { 
          display: flex; 
          justify-content: space-between; 
          align-items: flex-start;
          margin-bottom: 10px;
        }
        .state-name { 
          font-size: 20px; 
          font-weight: 600; 
          color: #111827;
          margin: 0;
        }
        .primary-badge { 
          background: #2563eb; 
          color: white; 
          padding: 4px 8px; 
          border-radius: 4px; 
          font-size: 12px;
          font-weight: 500;
        }
        .amount { 
          font-size: 32px; 
          font-weight: 700; 
          color: #111827;
          margin: 10px 0;
        }
        .amount-label { 
          color: #6b7280; 
          font-size: 14px;
          margin: 0;
        }
        .days-worked { 
          color: #6b7280; 
          font-size: 14px;
          text-align: right;
        }
        .tax-info { 
          margin-top: 15px; 
          padding-top: 15px; 
          border-top: 1px solid #d1d5db;
          font-size: 14px;
        }
        .tax-owed { 
          color: #dc2626; 
          font-weight: 600;
        }
        .warning { 
          background: #fef3c7; 
          border: 1px solid #f59e0b; 
          padding: 12px; 
          border-radius: 6px;
          color: #92400e;
          font-size: 14px;
          margin-top: 10px;
        }
        .footer { 
          margin-top: 40px; 
          padding-top: 20px; 
          border-top: 1px solid #e5e7eb; 
          text-align: center; 
          color: #6b7280; 
          font-size: 12px;
        }
        @media print {
          body { margin: 20px; }
          .state-card { break-inside: avoid; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Tax Allocation Results</h1>
        <p>Gross Taxable Income by State • Generated by Split.Tax on ${new Date().toLocaleDateString()}</p>
      </div>
      
      <div class="results">
        ${stateKeys.map(state => {
          const { total, days } = stateTotals[state];
          const isPrimary = state === primaryState;
          
          return `
            <div class="state-card ${isPrimary ? 'primary' : ''}">
              <div class="state-header">
                <div>
                  <h2 class="state-name">
                    ${state} ${isPrimary ? '<span class="primary-badge">Primary</span>' : ''}
                  </h2>
                  <p class="amount">${formatCurrency(total)}</p>
                  <p class="amount-label">Gross Taxable Income</p>
                </div>
                <div class="days-worked">
                  ${days} days worked
                </div>
              </div>
              
              ${isPrimary && primaryStateTax !== null && hasIncomeTax(state) ? `
                <div class="tax-info">
                  <p class="tax-owed">Estimated ${state} Income Tax Owed: ${formatCurrency(primaryStateTax)}</p>
                </div>
              ` : ''}
              
              ${!isPrimary && hasIncomeTax(state) && total > getStandardDeduction(state) ? `
                <div class="warning">
                  ⚠️ Income exceeds ${state} standard deduction (${formatCurrency(getStandardDeduction(state))}).
                  You may owe taxes in ${state}. Consult a tax professional.
                </div>
              ` : ''}
            </div>
          `;
        }).join('')}
      </div>
      
      <div class="footer">
        <p>This report provides estimates based on the information provided. Consult a tax professional for complex situations.</p>
        <p>Generated by Split.Tax • split.tax</p>
      </div>
    </body>
    </html>
  `;

  // Open print dialog
  const printWindow = window.open('', '_blank');
  if (printWindow) {
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    
    // Wait for content to load, then print
    setTimeout(() => {
      printWindow.print();
    }, 500);
  }
};

export const ResultsPanel: React.FC<ResultsPanelProps> = ({
  results,
  mnSettings,
  isLoading,
  message
}) => {
  if (isLoading) {
    return (
      <div className="flex-1">
        <div className="card">
          <div className="card-header">
            <h2 className="text-lg font-semibold text-zinc-900 dark:text-white">
              Allocation Results (Gross Taxable Income)
            </h2>
          </div>
          <div className="card-body">
            <div className="flex justify-center items-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-zinc-900 dark:border-white"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1">
      <div className="card">
        <div className="card-header">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-semibold text-zinc-900 dark:text-white">
              Allocation Results (Gross Taxable Income)
            </h2>
            {results && results.length > 0 && (
              <button
                onClick={() => generatePDF(results, mnSettings)}
                className="btn-secondary btn-sm flex items-center gap-2"
              >
                <CloudDownloadIcon />
                Download PDF
              </button>
            )}
          </div>
        </div>
        
        <div className="card-body">
          {message.text && (
            <div className={`text-center p-4 rounded-lg mb-6 ${
              message.type === 'error' ? 'badge-red' : 
              message.type === 'success' ? 'badge-green' : 
              'badge-blue'
            }`}>
              {message.text}
            </div>
          )}
          
          {results && results.length > 0 && (() => {
            const stateTotals: Record<string, { total: number; days: number }> = {};
            let primaryState = '';
            
            results.forEach(({ result }) => {
              primaryState = result.primaryState;
              for (const state in result.allocations) {
                if (!stateTotals[state]) {
                  stateTotals[state] = { total: 0, days: 0 };
                }
                stateTotals[state].total += result.allocations[state].total;
                stateTotals[state].days += result.allocations[state].days;
              }
            });
            
            const stateKeys = Object.keys(stateTotals)
              .filter(state => stateTotals[state].total > 0 || stateTotals[state].days > 0)
              .sort((a, b) => {
                const diff = stateTotals[b].total - stateTotals[a].total;
                if (diff !== 0) return diff;
                if (a === primaryState) return -1;
                if (b === primaryState) return 1;
                return a.localeCompare(b);
              });

            let primaryStateTax = null;
            if (stateTotals[primaryState] && hasIncomeTax(primaryState)) {
              const { tax } = calculateStateTax(
                stateTotals[primaryState].total, 
                primaryState, 
                mnSettings.deductionType,
                Number(mnSettings.itemizedDeduction || 0)
              );
              primaryStateTax = tax;
            }

            return (
              <div className="space-y-4">
                {stateKeys.map(state => {
                  const { total, days } = stateTotals[state];
                  const isPrimary = state === primaryState;
                  
                  return (
                    <div key={state} className="card">
                      <div className="card-body">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="text-lg font-semibold text-zinc-900 dark:text-white">
                              {state} {isPrimary && <span className="badge badge-blue ml-2">Primary</span>}
                            </h3>
                            <p className="text-2xl font-bold text-zinc-900 dark:text-white">
                              {formatCurrency(total)}
                            </p>
                            <p className="form-description mt-1">
                              Gross Taxable Income
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="form-description">
                              {days} days worked
                            </p>
                          </div>
                        </div>
                        
                        {isPrimary && primaryStateTax !== null && hasIncomeTax(state) && (
                          <div className="mt-3 pt-3 border-t border-zinc-200 dark:border-zinc-700">
                            <p className="text-sm font-semibold text-red-700 dark:text-red-400">
                              Estimated {state} Income Tax Owed: {formatCurrency(primaryStateTax)}
                            </p>
                          </div>
                        )}
                        
                        {!isPrimary && hasIncomeTax(state) && total > getStandardDeduction(state) && (
                          <div className="mt-3 pt-3 border-t border-yellow-200 dark:border-yellow-800">
                            <div className="badge badge-yellow">
                              ⚠️ Income exceeds {state} standard deduction ({formatCurrency(getStandardDeduction(state))})
                            </div>
                            <p className="form-description mt-1">
                              You may owe taxes in {state}. Consult a tax professional.
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            );
          })()}
          
          {!results && !isLoading && !message.text && (
            <div className="text-center py-12">
              <p className="form-description">Click "Calculate" to see your income allocation by state.</p>
              <p className="form-description text-xs mt-2">Make sure to fill out the Global Settings first.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
